{"ast":null,"code":"var _jsxFileName = \"/Users/lucas/Desktop/an/fe-edu/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { authService } from '../services';\nimport { jwtDecode } from 'jwt-decode';\nimport LoadingSpinner from '../components/LoadingSpinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconst initialState = {\n  user: null,\n  isAuthenticated: false,\n  isLoading: true,\n  error: null\n};\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'AUTH_START':\n      return {\n        ...state,\n        isLoading: true,\n        error: null\n      };\n    case 'AUTH_SUCCESS':\n      return {\n        ...state,\n        user: action.payload.user,\n        isAuthenticated: true,\n        isLoading: false,\n        error: null\n      };\n    case 'AUTH_FAILURE':\n      return {\n        ...state,\n        user: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: action.payload\n      };\n    case 'AUTH_LOGOUT':\n      return {\n        ...state,\n        user: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: null\n      };\n    case 'SET_LOADING':\n      // Dùng để kiểm soát trạng thái loading độc lập\n      return {\n        ...state,\n        isLoading: action.payload\n      };\n    default:\n      return state;\n  }\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Hàm để giải mã token và trả về thông tin user\n  const decodeUserFromToken = token => {\n    try {\n      const decoded = jwtDecode(token); // Sử dụng named export đã import\n      // Kiểm tra thời gian hết hạn của token\n      if (decoded.exp * 1000 < Date.now()) {\n        console.warn(\"Token expired.\");\n        localStorage.removeItem('accessToken');\n        return null;\n      }\n      // Trả về thông tin user từ payload của token\n      // Đảm bảo payload token có các trường bạn cần (ví dụ: id, email, role, name)\n      return {\n        id: decoded.id,\n        email: decoded.email,\n        name: decoded.name,\n        // Giả sử name có trong token\n        role: decoded.role\n        // ... thêm các trường khác nếu có trong JWT payload\n      };\n    } catch (e) {\n      console.error(\"Error decoding token:\", e);\n      localStorage.removeItem('accessToken'); // Xóa token nếu không hợp lệ\n      return null;\n    }\n  };\n  const checkAuth = async () => {\n    const token = localStorage.getItem('accessToken');\n    console.log('AuthContext: checkAuth started. Token present:', !!token);\n    if (!token) {\n      console.log('AuthContext: No token found. Setting isAuthenticated to false.');\n      dispatch({\n        type: 'AUTH_FAILURE',\n        payload: 'No token found'\n      }); // Dùng AUTH_FAILURE để reset trạng thái\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n      return;\n    }\n    const decodedUser = decodeUserFromToken(token);\n    if (decodedUser) {\n      console.log('AuthContext: Token decoded successfully, setting user from token:', decodedUser);\n      dispatch({\n        type: 'AUTH_SUCCESS',\n        payload: {\n          user: decodedUser\n        }\n      });\n      try {\n        console.log('AuthContext: Verifying token with backend (getAccount)...');\n        const response = await authService.getAccount();\n        if (response && response.success && response.data) {\n          console.log('AuthContext: Backend verification successful. User:', response.data);\n          // Cập nhật lại user nếu backend trả về thông tin chi tiết hơn hoặc có thay đổi\n          dispatch({\n            type: 'AUTH_SUCCESS',\n            payload: {\n              user: response.data\n            } // Dùng dữ liệu từ backend nếu có\n          });\n        } else {\n          console.warn('AuthContext: Backend verification failed, or invalid response. Keeping decoded user.');\n          // If backend verification fails but token is decoded, log out.\n          // This depends on your security policy. If getAccount is critical, logout.\n          localStorage.removeItem('accessToken');\n          dispatch({\n            type: 'AUTH_FAILURE',\n            payload: 'Backend verification failed'\n          });\n        }\n      } catch (apiError) {\n        var _apiError$response, _apiError$response2;\n        console.error('AuthContext: API error during token verification:', apiError);\n        if (((_apiError$response = apiError.response) === null || _apiError$response === void 0 ? void 0 : _apiError$response.status) === 401 || ((_apiError$response2 = apiError.response) === null || _apiError$response2 === void 0 ? void 0 : _apiError$response2.status) === 403) {\n          console.log('AuthContext: 401/403 from getAccount, removing token.');\n          localStorage.removeItem('accessToken');\n          dispatch({\n            type: 'AUTH_FAILURE',\n            payload: 'Token expired or invalid'\n          });\n        } else {\n          console.error('AuthContext: Network or other error during getAccount. Keeping decoded user for now.');\n          // Could dispatch a different error type or keep user if network issue\n        }\n      } finally {\n        dispatch({\n          type: 'SET_LOADING',\n          payload: false\n        }); // Always set loading to false in finally\n      }\n    } else {\n      console.log('AuthContext: Invalid or expired token, or decoding failed. Removing token.');\n      localStorage.removeItem('accessToken');\n      dispatch({\n        type: 'AUTH_FAILURE',\n        payload: 'Invalid or expired token'\n      });\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n    }\n  };\n  useEffect(() => {\n    checkAuth();\n  }, []); // Chỉ chạy một lần khi component mount\n\n  const login = async credentials => {\n    dispatch({\n      type: 'AUTH_START'\n    });\n    try {\n      const response = await authService.login(credentials);\n      console.log('Login attempt response:', response);\n      if (response && response.success && response.data) {\n        const accessToken = response.data.accessToken || response.data.access_token;\n        const user = response.data.user; // Đảm bảo backend trả về đối tượng user\n\n        if (!accessToken) {\n          throw new Error('No access token received from login.');\n        }\n        if (!user) {\n          throw new Error('No user data received from login.');\n        }\n        localStorage.setItem('accessToken', accessToken);\n        dispatch({\n          type: 'AUTH_SUCCESS',\n          payload: {\n            user\n          }\n        });\n        console.log('Login successful, user authenticated:', user);\n        return response; // Trả về response gốc để hàm gọi có thể xử lý\n      } else {\n        throw new Error((response === null || response === void 0 ? void 0 : response.message) || 'Login failed: Invalid response format.');\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Login error:', error);\n      dispatch({\n        type: 'AUTH_FAILURE',\n        payload: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message || 'An unknown error occurred during login.'\n      });\n      throw error; // Ném lỗi để component gọi có thể bắt\n    }\n  };\n  const register = async userData => {\n    dispatch({\n      type: 'AUTH_START'\n    });\n    try {\n      const response = await authService.register(userData);\n      console.log('Registration successful:', response);\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      }); // Đăng ký không tự động login\n      return response;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Registration failed:', error);\n      dispatch({\n        type: 'AUTH_FAILURE',\n        payload: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message || 'Registration failed.'\n      });\n      throw error;\n    }\n  };\n  const logout = async () => {\n    try {\n      await authService.logout(); // Gửi request logout đến backend\n    } catch (error) {\n      console.error('Logout API call failed, but proceeding with client-side logout:', error);\n    } finally {\n      localStorage.removeItem('accessToken');\n      dispatch({\n        type: 'AUTH_LOGOUT'\n      });\n    }\n  };\n  const value = {\n    ...state,\n    login,\n    register,\n    logout\n    // Không cần checkAuth trong value vì nó tự động chạy trong useEffect\n    // Bạn có thể thêm lại nếu muốn có thể gọi checkAuth thủ công từ bên ngoài\n  };\n\n  // Hiển thị LoadingSpinner khi isLoading là true\n  if (state.isLoading) {\n    return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 12\n    }, this); // Đảm bảo bạn đã import LoadingSpinner\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 217,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","authService","jwtDecode","LoadingSpinner","jsxDEV","_jsxDEV","AuthContext","initialState","user","isAuthenticated","isLoading","error","authReducer","state","action","type","payload","AuthProvider","children","_s","dispatch","decodeUserFromToken","token","decoded","exp","Date","now","console","warn","localStorage","removeItem","id","email","name","role","e","checkAuth","getItem","log","decodedUser","response","getAccount","success","data","apiError","_apiError$response","_apiError$response2","status","login","credentials","accessToken","access_token","Error","setItem","message","_error$response","_error$response$data","register","userData","_error$response2","_error$response2$data","logout","value","fileName","_jsxFileName","lineNumber","columnNumber","Provider","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["/Users/lucas/Desktop/an/fe-edu/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { authService } from '../services'; \nimport {jwtDecode} from 'jwt-decode'; \nimport LoadingSpinner from '../components/LoadingSpinner';\n\n\nconst AuthContext = createContext();\n\nconst initialState = {\n  user: null,\n  isAuthenticated: false,\n  isLoading: true,\n  error: null,\n};\n\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'AUTH_START':\n      return { ...state, isLoading: true, error: null };\n    case 'AUTH_SUCCESS':\n      return {\n        ...state,\n        user: action.payload.user,\n        isAuthenticated: true,\n        isLoading: false,\n        error: null,\n      };\n    case 'AUTH_FAILURE':\n      return {\n        ...state,\n        user: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: action.payload,\n      };\n    case 'AUTH_LOGOUT':\n      return {\n        ...state,\n        user: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: null,\n      };\n    case 'SET_LOADING': // Dùng để kiểm soát trạng thái loading độc lập\n      return { ...state, isLoading: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Hàm để giải mã token và trả về thông tin user\n  const decodeUserFromToken = (token) => {\n    try {\n      const decoded = jwtDecode(token); // Sử dụng named export đã import\n      // Kiểm tra thời gian hết hạn của token\n      if (decoded.exp * 1000 < Date.now()) {\n        console.warn(\"Token expired.\");\n        localStorage.removeItem('accessToken');\n        return null;\n      }\n      // Trả về thông tin user từ payload của token\n      // Đảm bảo payload token có các trường bạn cần (ví dụ: id, email, role, name)\n      return {\n        id: decoded.id,\n        email: decoded.email,\n        name: decoded.name, // Giả sử name có trong token\n        role: decoded.role,\n        // ... thêm các trường khác nếu có trong JWT payload\n      };\n    } catch (e) {\n      console.error(\"Error decoding token:\", e);\n      localStorage.removeItem('accessToken'); // Xóa token nếu không hợp lệ\n      return null;\n    }\n  };\n\n  const checkAuth = async () => {\n    const token = localStorage.getItem('accessToken');\n    console.log('AuthContext: checkAuth started. Token present:', !!token);\n\n    if (!token) {\n      console.log('AuthContext: No token found. Setting isAuthenticated to false.');\n      dispatch({ type: 'AUTH_FAILURE', payload: 'No token found' }); // Dùng AUTH_FAILURE để reset trạng thái\n      dispatch({ type: 'SET_LOADING', payload: false });\n      return;\n    }\n\n    const decodedUser = decodeUserFromToken(token);\n\n    if (decodedUser) {\n      console.log('AuthContext: Token decoded successfully, setting user from token:', decodedUser);\n      dispatch({\n        type: 'AUTH_SUCCESS',\n        payload: { user: decodedUser },\n      });\n\n      try {\n        console.log('AuthContext: Verifying token with backend (getAccount)...');\n        const response = await authService.getAccount();\n        if (response && response.success && response.data) {\n          console.log('AuthContext: Backend verification successful. User:', response.data);\n          // Cập nhật lại user nếu backend trả về thông tin chi tiết hơn hoặc có thay đổi\n          dispatch({\n            type: 'AUTH_SUCCESS',\n            payload: { user: response.data }, // Dùng dữ liệu từ backend nếu có\n          });\n        } else {\n          console.warn('AuthContext: Backend verification failed, or invalid response. Keeping decoded user.');\n          // If backend verification fails but token is decoded, log out.\n          // This depends on your security policy. If getAccount is critical, logout.\n          localStorage.removeItem('accessToken');\n          dispatch({ type: 'AUTH_FAILURE', payload: 'Backend verification failed' });\n        }\n      } catch (apiError) {\n        console.error('AuthContext: API error during token verification:', apiError);\n        if (apiError.response?.status === 401 || apiError.response?.status === 403) {\n          console.log('AuthContext: 401/403 from getAccount, removing token.');\n          localStorage.removeItem('accessToken');\n          dispatch({ type: 'AUTH_FAILURE', payload: 'Token expired or invalid' });\n        } else {\n          console.error('AuthContext: Network or other error during getAccount. Keeping decoded user for now.');\n          // Could dispatch a different error type or keep user if network issue\n        }\n      } finally {\n        dispatch({ type: 'SET_LOADING', payload: false }); // Always set loading to false in finally\n      }\n    } else {\n      console.log('AuthContext: Invalid or expired token, or decoding failed. Removing token.');\n      localStorage.removeItem('accessToken');\n      dispatch({ type: 'AUTH_FAILURE', payload: 'Invalid or expired token' });\n      dispatch({ type: 'SET_LOADING', payload: false });\n    }\n  };\n\n\n  useEffect(() => {\n    checkAuth();\n  }, []); // Chỉ chạy một lần khi component mount\n\n  const login = async (credentials) => {\n    dispatch({ type: 'AUTH_START' });\n    try {\n      const response = await authService.login(credentials);\n      console.log('Login attempt response:', response);\n\n      if (response && response.success && response.data) {\n        const accessToken = response.data.accessToken || response.data.access_token;\n        const user = response.data.user; // Đảm bảo backend trả về đối tượng user\n\n        if (!accessToken) {\n          throw new Error('No access token received from login.');\n        }\n        if (!user) {\n          throw new Error('No user data received from login.');\n        }\n\n        localStorage.setItem('accessToken', accessToken);\n        dispatch({\n          type: 'AUTH_SUCCESS',\n          payload: { user },\n        });\n        console.log('Login successful, user authenticated:', user);\n        return response; // Trả về response gốc để hàm gọi có thể xử lý\n      } else {\n        throw new Error(response?.message || 'Login failed: Invalid response format.');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      dispatch({ type: 'AUTH_FAILURE', payload: error.response?.data?.message || error.message || 'An unknown error occurred during login.' });\n      throw error; // Ném lỗi để component gọi có thể bắt\n    }\n  };\n\n  const register = async (userData) => {\n    dispatch({ type: 'AUTH_START' });\n    try {\n      const response = await authService.register(userData);\n      console.log('Registration successful:', response);\n      dispatch({ type: 'SET_LOADING', payload: false }); // Đăng ký không tự động login\n      return response;\n    } catch (error) {\n      console.error('Registration failed:', error);\n      dispatch({ type: 'AUTH_FAILURE', payload: error.response?.data?.message || error.message || 'Registration failed.' });\n      throw error;\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await authService.logout(); // Gửi request logout đến backend\n    } catch (error) {\n      console.error('Logout API call failed, but proceeding with client-side logout:', error);\n    } finally {\n      localStorage.removeItem('accessToken');\n      dispatch({ type: 'AUTH_LOGOUT' });\n    }\n  };\n\n  const value = {\n    ...state,\n    login,\n    register,\n    logout,\n    // Không cần checkAuth trong value vì nó tự động chạy trong useEffect\n    // Bạn có thể thêm lại nếu muốn có thể gọi checkAuth thủ công từ bên ngoài\n  };\n\n  // Hiển thị LoadingSpinner khi isLoading là true\n  if (state.isLoading) {\n    return <LoadingSpinner />; // Đảm bảo bạn đã import LoadingSpinner\n  }\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}