{"ast":null,"code":"// src/services/newsService.js\nimport apiClient from './apiClient';\nimport { createFileUploadConfig } from './apiClient';\nconst API_BASE_PATH = '/api/v1/news';\nconst newsService = {\n  // Get all news articles\n  getAllNews: async () => {\n    try {\n      const response = await apiClient.get(API_BASE_PATH);\n      // >>> THAY ĐỔI TẠI ĐÂY: Trả về response.data (là mảng tin tức)\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error(\"Error fetching all news:\", error);\n      // Rút gọn lỗi để dễ debug hơn nếu có\n      throw new Error(`Failed to fetch news: ${((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message}`);\n    }\n  },\n  // Get news by ID\n  getNewsById: async id => {\n    try {\n      const response = await apiClient.get(`${API_BASE_PATH}/${id}`);\n      // >>> THAY ĐỔI TẠI ĐÂY: Trả về response.data\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error(`Error fetching news with ID ${id}:`, error);\n      throw new Error(`Failed to fetch news with ID ${id}: ${((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message}`);\n    }\n  },\n  createNews: async newsData => {\n    try {\n      const response = await apiClient.post(API_BASE_PATH, newsData);\n      return response.data; // Trả về data của response\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      console.error(\"Error creating news:\", error);\n      throw new Error(`Failed to create news: ${((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || error.message}`);\n    }\n  },\n  // Update a news article\n  updateNews: async (id, newsData) => {\n    try {\n      const response = await apiClient.put(`${API_BASE_PATH}/${id}`, newsData);\n      return response.data; // Trả về data của response\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      console.error(`Error updating news with ID ${id}:`, error);\n      throw new Error(`Failed to update news with ID ${id}: ${((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || error.message}`);\n    }\n  },\n  // Delete a news article\n  deleteNews: async id => {\n    try {\n      const response = await apiClient.delete(`${API_BASE_PATH}/${id}`);\n      return response.data; // Trả về data của response\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      console.error(`Error deleting news with ID ${id}:`, error);\n      throw new Error(`Failed to delete news with ID ${id}: ${((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || error.message}`);\n    }\n  },\n  uploadNewsAttachments: async (newsId, file, onUploadProgress) => {\n    try {\n      const formData = new FormData();\n      formData.append('files', file);\n      const config = createFileUploadConfig(onUploadProgress);\n      const response = await apiClient.post(`${API_BASE_PATH}/uploads/${newsId}`, formData, config);\n      return response.data; // Trả về data của response\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      console.error(`Error uploading attachment for news ID ${newsId}:`, error);\n      throw new Error(`Failed to upload attachment for news ID ${newsId}: ${((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || error.message}`);\n    }\n  },\n  getImageUrl: imageName => {\n    // Đảm bảo REACT_APP_API_URL được cấu hình đúng trong .env\n    // Ví dụ: REACT_APP_API_URL=http://localhost:8080\n    return `${process.env.REACT_APP_API_URL || 'http://localhost:8080'}${API_BASE_PATH}/image/${imageName}`;\n  }\n};\nexport default newsService;","map":{"version":3,"names":["apiClient","createFileUploadConfig","API_BASE_PATH","newsService","getAllNews","response","get","data","error","_error$response","_error$response$data","console","Error","message","getNewsById","id","_error$response2","_error$response2$data","createNews","newsData","post","_error$response3","_error$response3$data","updateNews","put","_error$response4","_error$response4$data","deleteNews","delete","_error$response5","_error$response5$data","uploadNewsAttachments","newsId","file","onUploadProgress","formData","FormData","append","config","_error$response6","_error$response6$data","getImageUrl","imageName","process","env","REACT_APP_API_URL"],"sources":["/Users/lucas/Desktop/an/fe-edu/src/services/newsService.js"],"sourcesContent":["// src/services/newsService.js\nimport apiClient from './apiClient';\nimport { createFileUploadConfig } from './apiClient';\n\nconst API_BASE_PATH = '/api/v1/news';\n\nconst newsService = {\n  // Get all news articles\n  getAllNews: async () => {\n    try {\n      const response = await apiClient.get(API_BASE_PATH);\n      // >>> THAY ĐỔI TẠI ĐÂY: Trả về response.data (là mảng tin tức)\n      return response.data;\n    } catch (error) {\n      console.error(\"Error fetching all news:\", error);\n      // Rút gọn lỗi để dễ debug hơn nếu có\n      throw new Error(`Failed to fetch news: ${error.response?.data?.message || error.message}`);\n    }\n  },\n\n  // Get news by ID\n  getNewsById: async (id) => {\n    try {\n      const response = await apiClient.get(`${API_BASE_PATH}/${id}`);\n      // >>> THAY ĐỔI TẠI ĐÂY: Trả về response.data\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching news with ID ${id}:`, error);\n      throw new Error(`Failed to fetch news with ID ${id}: ${error.response?.data?.message || error.message}`);\n    }\n  },\n\n  createNews: async (newsData) => {\n    try {\n      const response = await apiClient.post(API_BASE_PATH, newsData);\n      return response.data; // Trả về data của response\n    } catch (error) {\n      console.error(\"Error creating news:\", error);\n      throw new Error(`Failed to create news: ${error.response?.data?.message || error.message}`);\n    }\n  },\n\n  // Update a news article\n  updateNews: async (id, newsData) => {\n    try {\n      const response = await apiClient.put(`${API_BASE_PATH}/${id}`, newsData);\n      return response.data; // Trả về data của response\n    } catch (error) {\n      console.error(`Error updating news with ID ${id}:`, error);\n      throw new Error(`Failed to update news with ID ${id}: ${error.response?.data?.message || error.message}`);\n    }\n  },\n\n  // Delete a news article\n  deleteNews: async (id) => {\n    try {\n      const response = await apiClient.delete(`${API_BASE_PATH}/${id}`);\n      return response.data; // Trả về data của response\n    } catch (error) {\n      console.error(`Error deleting news with ID ${id}:`, error);\n      throw new Error(`Failed to delete news with ID ${id}: ${error.response?.data?.message || error.message}`);\n    }\n  },\n\n  uploadNewsAttachments: async (newsId, file, onUploadProgress) => {\n    try {\n      const formData = new FormData();\n      formData.append('files', file);\n\n      const config = createFileUploadConfig(onUploadProgress);\n      const response = await apiClient.post(`${API_BASE_PATH}/uploads/${newsId}`, formData, config);\n      return response.data; // Trả về data của response\n    } catch (error) {\n      console.error(`Error uploading attachment for news ID ${newsId}:`, error);\n      throw new Error(`Failed to upload attachment for news ID ${newsId}: ${error.response?.data?.message || error.message}`);\n    }\n  },\n\n  getImageUrl: (imageName) => {\n    // Đảm bảo REACT_APP_API_URL được cấu hình đúng trong .env\n    // Ví dụ: REACT_APP_API_URL=http://localhost:8080\n    return `${process.env.REACT_APP_API_URL || 'http://localhost:8080'}${API_BASE_PATH}/image/${imageName}`;\n  }\n};\n\nexport default newsService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}