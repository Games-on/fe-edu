{"ast":null,"code":"import apiClient from './api';\nexport const authService = {\n  // Register new user\n  register: async userData => {\n    const response = await apiClient.post('/api/v1/auth/register', userData);\n    return response.data;\n  },\n  // Login user\n  login: async credentials => {\n    const response = await apiClient.post('/api/v1/auth/login', credentials);\n    return response.data;\n  },\n  // Get current user account\n  getAccount: async () => {\n    const response = await apiClient.get('/api/v1/auth/account');\n    return response.data;\n  },\n  // Logout user\n  logout: async () => {\n    const response = await apiClient.post('/api/v1/auth/logout');\n    return response.data;\n  },\n  // Refresh token\n  refreshToken: async () => {\n    const response = await apiClient.post('/api/v1/auth/refresh');\n    return response.data;\n  }\n};\nexport const adminService = {\n  // User management\n  getAllUsers: async (params = {}) => {\n    const response = await apiClient.get('/api/admin/users', {\n      params\n    });\n    return response.data;\n  },\n  updateUser: async (userId, userData) => {\n    const response = await apiClient.put(`/api/admin/users/${userId}`, userData);\n    return response.data;\n  },\n  deleteUser: async userId => {\n    const response = await apiClient.delete(`/api/admin/users/${userId}`);\n    return response.data;\n  },\n  // System stats\n  getSystemStats: async () => {\n    const response = await apiClient.get('/api/admin/stats');\n    return response.data;\n  },\n  // System health\n  getSystemHealth: async () => {\n    const response = await apiClient.get('/api/admin/health');\n    return response.data;\n  }\n};\nexport const tournamentService = {\n  // Get all tournaments\n  getAllTournaments: async (params = {}) => {\n    const response = await apiClient.get('/api/tournaments', {\n      params\n    });\n    return response.data;\n  },\n  // Get tournament by ID\n  getTournamentById: async id => {\n    const response = await apiClient.get(`/api/tournaments/${id}`);\n    return response.data;\n  },\n  // Create tournament\n  createTournament: async tournamentData => {\n    const response = await apiClient.post('/api/tournaments', tournamentData);\n    return response.data;\n  },\n  // Update tournament\n  updateTournament: async (id, tournamentData) => {\n    const response = await apiClient.put(`/api/tournaments/${id}`, tournamentData);\n    return response.data;\n  },\n  // Delete tournament\n  deleteTournament: async id => {\n    const response = await apiClient.delete(`/api/tournaments/${id}`);\n    return response.data;\n  },\n  // Start tournament\n  startTournament: async id => {\n    const response = await apiClient.post(`/api/tournaments/${id}/start`);\n    return response.data;\n  }\n};\nexport const teamService = {\n  // Get teams by tournament\n  getTeamsByTournament: async tournamentId => {\n    const response = await apiClient.get(`/api/tournaments/${tournamentId}/teams`);\n    return response.data;\n  },\n  // Get team by ID\n  getTeamById: async id => {\n    const response = await apiClient.get(`/api/teams/${id}`);\n    return response.data;\n  },\n  // Register team for tournament\n  registerTeam: async (tournamentId, teamData) => {\n    const response = await apiClient.post(`/api/tournaments/${tournamentId}/register`, teamData);\n    return response.data;\n  },\n  // Update team\n  updateTeam: async (id, teamData) => {\n    const response = await apiClient.put(`/api/teams/${id}`, teamData);\n    return response.data;\n  },\n  // Delete team\n  deleteTeam: async id => {\n    const response = await apiClient.delete(`/api/teams/${id}`);\n    return response.data;\n  }\n};\nexport const matchService = {\n  // Get matches by tournament\n  getMatchesByTournament: async (tournamentId, params = {}) => {\n    const response = await apiClient.get(`/api/tournaments/${tournamentId}/matches`, {\n      params\n    });\n    return response.data;\n  },\n  // Get match by ID\n  getMatchById: async id => {\n    const response = await apiClient.get(`/api/matches/${id}`);\n    return response.data;\n  },\n  // Create match\n  createMatch: async (tournamentId, matchData) => {\n    const response = await apiClient.post(`/api/tournaments/${tournamentId}/matches`, matchData);\n    return response.data;\n  },\n  // Update match score\n  updateMatchScore: async (id, scoreData) => {\n    const response = await apiClient.put(`/api/matches/${id}/score`, scoreData);\n    return response.data;\n  },\n  // Update match status\n  updateMatchStatus: async (id, statusData) => {\n    const response = await apiClient.put(`/api/matches/${id}/status`, statusData);\n    return response.data;\n  },\n  // Get tournament bracket\n  getTournamentBracket: async tournamentId => {\n    const response = await apiClient.get(`/api/tournaments/${tournamentId}/bracket`);\n    return response.data;\n  }\n};\nexport const newsService = {\n  // Get all news\n  getAllNews: async () => {\n    const response = await apiClient.get('/api/v1/news');\n    return response.data;\n  },\n  // Get news by ID\n  getNewsById: async id => {\n    const response = await apiClient.get(`/api/v1/news/${id}`);\n    return response.data;\n  },\n  // Create news\n  createNews: async newsData => {\n    const response = await apiClient.post('/api/v1/news', newsData);\n    return response.data;\n  },\n  // Update news\n  updateNews: async (id, newsData) => {\n    const response = await apiClient.put(`/api/v1/news/${id}`, newsData);\n    return response.data;\n  },\n  // Delete news\n  deleteNews: async id => {\n    const response = await apiClient.delete(`/api/v1/news/${id}`);\n    return response.data;\n  }\n};","map":{"version":3,"names":["apiClient","authService","register","userData","response","post","data","login","credentials","getAccount","get","logout","refreshToken","adminService","getAllUsers","params","updateUser","userId","put","deleteUser","delete","getSystemStats","getSystemHealth","tournamentService","getAllTournaments","getTournamentById","id","createTournament","tournamentData","updateTournament","deleteTournament","startTournament","teamService","getTeamsByTournament","tournamentId","getTeamById","registerTeam","teamData","updateTeam","deleteTeam","matchService","getMatchesByTournament","getMatchById","createMatch","matchData","updateMatchScore","scoreData","updateMatchStatus","statusData","getTournamentBracket","newsService","getAllNews","getNewsById","createNews","newsData","updateNews","deleteNews"],"sources":["C:/Users/ACER/Desktop/edusports/fe/src/services/index.js"],"sourcesContent":["import apiClient from './api';\n\nexport const authService = {\n  // Register new user\n  register: async (userData) => {\n    const response = await apiClient.post('/api/v1/auth/register', userData);\n    return response.data;\n  },\n\n  // Login user\n  login: async (credentials) => {\n    const response = await apiClient.post('/api/v1/auth/login', credentials);\n    return response.data;\n  },\n\n  // Get current user account\n  getAccount: async () => {\n    const response = await apiClient.get('/api/v1/auth/account');\n    return response.data;\n  },\n\n  // Logout user\n  logout: async () => {\n    const response = await apiClient.post('/api/v1/auth/logout');\n    return response.data;\n  },\n\n  // Refresh token\n  refreshToken: async () => {\n    const response = await apiClient.post('/api/v1/auth/refresh');\n    return response.data;\n  },\n};\n\nexport const adminService = {\n  // User management\n  getAllUsers: async (params = {}) => {\n    const response = await apiClient.get('/api/admin/users', { params });\n    return response.data;\n  },\n\n  updateUser: async (userId, userData) => {\n    const response = await apiClient.put(`/api/admin/users/${userId}`, userData);\n    return response.data;\n  },\n\n  deleteUser: async (userId) => {\n    const response = await apiClient.delete(`/api/admin/users/${userId}`);\n    return response.data;\n  },\n\n  // System stats\n  getSystemStats: async () => {\n    const response = await apiClient.get('/api/admin/stats');\n    return response.data;\n  },\n\n  // System health\n  getSystemHealth: async () => {\n    const response = await apiClient.get('/api/admin/health');\n    return response.data;\n  },\n};\n\nexport const tournamentService = {\n  // Get all tournaments\n  getAllTournaments: async (params = {}) => {\n    const response = await apiClient.get('/api/tournaments', { params });\n    return response.data;\n  },\n\n  // Get tournament by ID\n  getTournamentById: async (id) => {\n    const response = await apiClient.get(`/api/tournaments/${id}`);\n    return response.data;\n  },\n\n  // Create tournament\n  createTournament: async (tournamentData) => {\n    const response = await apiClient.post('/api/tournaments', tournamentData);\n    return response.data;\n  },\n\n  // Update tournament\n  updateTournament: async (id, tournamentData) => {\n    const response = await apiClient.put(`/api/tournaments/${id}`, tournamentData);\n    return response.data;\n  },\n\n  // Delete tournament\n  deleteTournament: async (id) => {\n    const response = await apiClient.delete(`/api/tournaments/${id}`);\n    return response.data;\n  },\n\n  // Start tournament\n  startTournament: async (id) => {\n    const response = await apiClient.post(`/api/tournaments/${id}/start`);\n    return response.data;\n  },\n};\n\nexport const teamService = {\n  // Get teams by tournament\n  getTeamsByTournament: async (tournamentId) => {\n    const response = await apiClient.get(`/api/tournaments/${tournamentId}/teams`);\n    return response.data;\n  },\n\n  // Get team by ID\n  getTeamById: async (id) => {\n    const response = await apiClient.get(`/api/teams/${id}`);\n    return response.data;\n  },\n\n  // Register team for tournament\n  registerTeam: async (tournamentId, teamData) => {\n    const response = await apiClient.post(`/api/tournaments/${tournamentId}/register`, teamData);\n    return response.data;\n  },\n\n  // Update team\n  updateTeam: async (id, teamData) => {\n    const response = await apiClient.put(`/api/teams/${id}`, teamData);\n    return response.data;\n  },\n\n  // Delete team\n  deleteTeam: async (id) => {\n    const response = await apiClient.delete(`/api/teams/${id}`);\n    return response.data;\n  },\n};\n\nexport const matchService = {\n  // Get matches by tournament\n  getMatchesByTournament: async (tournamentId, params = {}) => {\n    const response = await apiClient.get(`/api/tournaments/${tournamentId}/matches`, { params });\n    return response.data;\n  },\n\n  // Get match by ID\n  getMatchById: async (id) => {\n    const response = await apiClient.get(`/api/matches/${id}`);\n    return response.data;\n  },\n\n  // Create match\n  createMatch: async (tournamentId, matchData) => {\n    const response = await apiClient.post(`/api/tournaments/${tournamentId}/matches`, matchData);\n    return response.data;\n  },\n\n  // Update match score\n  updateMatchScore: async (id, scoreData) => {\n    const response = await apiClient.put(`/api/matches/${id}/score`, scoreData);\n    return response.data;\n  },\n\n  // Update match status\n  updateMatchStatus: async (id, statusData) => {\n    const response = await apiClient.put(`/api/matches/${id}/status`, statusData);\n    return response.data;\n  },\n\n  // Get tournament bracket\n  getTournamentBracket: async (tournamentId) => {\n    const response = await apiClient.get(`/api/tournaments/${tournamentId}/bracket`);\n    return response.data;\n  },\n};\n\nexport const newsService = {\n  // Get all news\n  getAllNews: async () => {\n    const response = await apiClient.get('/api/v1/news');\n    return response.data;\n  },\n\n  // Get news by ID\n  getNewsById: async (id) => {\n    const response = await apiClient.get(`/api/v1/news/${id}`);\n    return response.data;\n  },\n\n  // Create news\n  createNews: async (newsData) => {\n    const response = await apiClient.post('/api/v1/news', newsData);\n    return response.data;\n  },\n\n  // Update news\n  updateNews: async (id, newsData) => {\n    const response = await apiClient.put(`/api/v1/news/${id}`, newsData);\n    return response.data;\n  },\n\n  // Delete news\n  deleteNews: async (id) => {\n    const response = await apiClient.delete(`/api/v1/news/${id}`);\n    return response.data;\n  },\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}