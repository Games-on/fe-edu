{"ast":null,"code":"import apiClient from './api';\nexport const authService = {\n  // Register new user\n  register: async userData => {\n    const response = await apiClient.post('/api/v1/auth/register', userData);\n    return response.data;\n  },\n  // Login user\n  login: async credentials => {\n    const response = await apiClient.post('/api/v1/auth/login', credentials);\n    return response.data;\n  },\n  // Get current user account\n  getAccount: async () => {\n    const response = await apiClient.get('/api/v1/auth/account');\n    return response.data;\n  },\n  // Logout user\n  logout: async () => {\n    const response = await apiClient.post('/api/v1/auth/logout');\n    return response.data;\n  },\n  // Refresh token\n  refreshToken: async () => {\n    const response = await apiClient.post('/api/v1/auth/refresh');\n    return response.data;\n  }\n};\nexport const tournamentService = {\n  // Get all tournaments\n  getAllTournaments: async (params = {}) => {\n    const response = await apiClient.get('/api/tournaments', {\n      params\n    });\n    return response.data;\n  },\n  // Get tournament by ID\n  getTournamentById: async id => {\n    const response = await apiClient.get(`/api/tournaments/${id}`);\n    return response.data;\n  },\n  // Create tournament\n  createTournament: async tournamentData => {\n    const response = await apiClient.post('/api/tournaments', tournamentData);\n    return response.data;\n  },\n  // Update tournament\n  updateTournament: async (id, tournamentData) => {\n    const response = await apiClient.put(`/api/tournaments/${id}`, tournamentData);\n    return response.data;\n  },\n  // Delete tournament\n  deleteTournament: async id => {\n    const response = await apiClient.delete(`/api/tournaments/${id}`);\n    return response.data;\n  },\n  // Start tournament\n  startTournament: async id => {\n    const response = await apiClient.post(`/api/tournaments/${id}/start`);\n    return response.data;\n  }\n};\nexport const teamService = {\n  // Get teams by tournament\n  getTeamsByTournament: async tournamentId => {\n    const response = await apiClient.get(`/api/tournaments/${tournamentId}/teams`);\n    return response.data;\n  },\n  // Get team by ID\n  getTeamById: async id => {\n    const response = await apiClient.get(`/api/teams/${id}`);\n    return response.data;\n  },\n  // Register team for tournament\n  registerTeam: async (tournamentId, teamData) => {\n    const response = await apiClient.post(`/api/tournaments/${tournamentId}/register`, teamData);\n    return response.data;\n  },\n  // Update team\n  updateTeam: async (id, teamData) => {\n    const response = await apiClient.put(`/api/teams/${id}`, teamData);\n    return response.data;\n  },\n  // Delete team\n  deleteTeam: async id => {\n    const response = await apiClient.delete(`/api/teams/${id}`);\n    return response.data;\n  }\n};\nexport const matchService = {\n  // Get matches by tournament\n  getMatchesByTournament: async (tournamentId, params = {}) => {\n    const response = await apiClient.get(`/api/tournaments/${tournamentId}/matches`, {\n      params\n    });\n    return response.data;\n  },\n  // Get match by ID\n  getMatchById: async id => {\n    const response = await apiClient.get(`/api/matches/${id}`);\n    return response.data;\n  },\n  // Create match\n  createMatch: async (tournamentId, matchData) => {\n    const response = await apiClient.post(`/api/tournaments/${tournamentId}/matches`, matchData);\n    return response.data;\n  },\n  // Update match score\n  updateMatchScore: async (id, scoreData) => {\n    const response = await apiClient.put(`/api/matches/${id}/score`, scoreData);\n    return response.data;\n  },\n  // Update match status\n  updateMatchStatus: async (id, statusData) => {\n    const response = await apiClient.put(`/api/matches/${id}/status`, statusData);\n    return response.data;\n  },\n  // Get tournament bracket\n  getTournamentBracket: async tournamentId => {\n    const response = await apiClient.get(`/api/tournaments/${tournamentId}/bracket`);\n    return response.data;\n  }\n};\nexport const newsService = {\n  // Get all news\n  getAllNews: async () => {\n    const response = await apiClient.get('/api/v1/news');\n    return response.data;\n  },\n  // Get news by ID\n  getNewsById: async id => {\n    const response = await apiClient.get(`/api/v1/news/${id}`);\n    return response.data;\n  },\n  // Create news\n  createNews: async newsData => {\n    const response = await apiClient.post('/api/v1/news', newsData);\n    return response.data;\n  },\n  // Update news\n  updateNews: async (id, newsData) => {\n    const response = await apiClient.put(`/api/v1/news/${id}`, newsData);\n    return response.data;\n  },\n  // Delete news\n  deleteNews: async id => {\n    const response = await apiClient.delete(`/api/v1/news/${id}`);\n    return response.data;\n  }\n};","map":{"version":3,"names":["apiClient","authService","register","userData","response","post","data","login","credentials","getAccount","get","logout","refreshToken","tournamentService","getAllTournaments","params","getTournamentById","id","createTournament","tournamentData","updateTournament","put","deleteTournament","delete","startTournament","teamService","getTeamsByTournament","tournamentId","getTeamById","registerTeam","teamData","updateTeam","deleteTeam","matchService","getMatchesByTournament","getMatchById","createMatch","matchData","updateMatchScore","scoreData","updateMatchStatus","statusData","getTournamentBracket","newsService","getAllNews","getNewsById","createNews","newsData","updateNews","deleteNews"],"sources":["C:/Users/ACER/Desktop/edusports/fe/src/services/index.js"],"sourcesContent":["import apiClient from './api';\n\nexport const authService = {\n  // Register new user\n  register: async (userData) => {\n    const response = await apiClient.post('/api/v1/auth/register', userData);\n    return response.data;\n  },\n\n  // Login user\n  login: async (credentials) => {\n    const response = await apiClient.post('/api/v1/auth/login', credentials);\n    return response.data;\n  },\n\n  // Get current user account\n  getAccount: async () => {\n    const response = await apiClient.get('/api/v1/auth/account');\n    return response.data;\n  },\n\n  // Logout user\n  logout: async () => {\n    const response = await apiClient.post('/api/v1/auth/logout');\n    return response.data;\n  },\n\n  // Refresh token\n  refreshToken: async () => {\n    const response = await apiClient.post('/api/v1/auth/refresh');\n    return response.data;\n  },\n};\n\nexport const tournamentService = {\n  // Get all tournaments\n  getAllTournaments: async (params = {}) => {\n    const response = await apiClient.get('/api/tournaments', { params });\n    return response.data;\n  },\n\n  // Get tournament by ID\n  getTournamentById: async (id) => {\n    const response = await apiClient.get(`/api/tournaments/${id}`);\n    return response.data;\n  },\n\n  // Create tournament\n  createTournament: async (tournamentData) => {\n    const response = await apiClient.post('/api/tournaments', tournamentData);\n    return response.data;\n  },\n\n  // Update tournament\n  updateTournament: async (id, tournamentData) => {\n    const response = await apiClient.put(`/api/tournaments/${id}`, tournamentData);\n    return response.data;\n  },\n\n  // Delete tournament\n  deleteTournament: async (id) => {\n    const response = await apiClient.delete(`/api/tournaments/${id}`);\n    return response.data;\n  },\n\n  // Start tournament\n  startTournament: async (id) => {\n    const response = await apiClient.post(`/api/tournaments/${id}/start`);\n    return response.data;\n  },\n};\n\nexport const teamService = {\n  // Get teams by tournament\n  getTeamsByTournament: async (tournamentId) => {\n    const response = await apiClient.get(`/api/tournaments/${tournamentId}/teams`);\n    return response.data;\n  },\n\n  // Get team by ID\n  getTeamById: async (id) => {\n    const response = await apiClient.get(`/api/teams/${id}`);\n    return response.data;\n  },\n\n  // Register team for tournament\n  registerTeam: async (tournamentId, teamData) => {\n    const response = await apiClient.post(`/api/tournaments/${tournamentId}/register`, teamData);\n    return response.data;\n  },\n\n  // Update team\n  updateTeam: async (id, teamData) => {\n    const response = await apiClient.put(`/api/teams/${id}`, teamData);\n    return response.data;\n  },\n\n  // Delete team\n  deleteTeam: async (id) => {\n    const response = await apiClient.delete(`/api/teams/${id}`);\n    return response.data;\n  },\n};\n\nexport const matchService = {\n  // Get matches by tournament\n  getMatchesByTournament: async (tournamentId, params = {}) => {\n    const response = await apiClient.get(`/api/tournaments/${tournamentId}/matches`, { params });\n    return response.data;\n  },\n\n  // Get match by ID\n  getMatchById: async (id) => {\n    const response = await apiClient.get(`/api/matches/${id}`);\n    return response.data;\n  },\n\n  // Create match\n  createMatch: async (tournamentId, matchData) => {\n    const response = await apiClient.post(`/api/tournaments/${tournamentId}/matches`, matchData);\n    return response.data;\n  },\n\n  // Update match score\n  updateMatchScore: async (id, scoreData) => {\n    const response = await apiClient.put(`/api/matches/${id}/score`, scoreData);\n    return response.data;\n  },\n\n  // Update match status\n  updateMatchStatus: async (id, statusData) => {\n    const response = await apiClient.put(`/api/matches/${id}/status`, statusData);\n    return response.data;\n  },\n\n  // Get tournament bracket\n  getTournamentBracket: async (tournamentId) => {\n    const response = await apiClient.get(`/api/tournaments/${tournamentId}/bracket`);\n    return response.data;\n  },\n};\n\nexport const newsService = {\n  // Get all news\n  getAllNews: async () => {\n    const response = await apiClient.get('/api/v1/news');\n    return response.data;\n  },\n\n  // Get news by ID\n  getNewsById: async (id) => {\n    const response = await apiClient.get(`/api/v1/news/${id}`);\n    return response.data;\n  },\n\n  // Create news\n  createNews: async (newsData) => {\n    const response = await apiClient.post('/api/v1/news', newsData);\n    return response.data;\n  },\n\n  // Update news\n  updateNews: async (id, newsData) => {\n    const response = await apiClient.put(`/api/v1/news/${id}`, newsData);\n    return response.data;\n  },\n\n  // Delete news\n  deleteNews: async (id) => {\n    const response = await apiClient.delete(`/api/v1/news/${id}`);\n    return response.data;\n  },\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}